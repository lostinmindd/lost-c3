"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupProperty = exports.ObjectProperty = exports.ColorProperty = exports.ComboProperty = exports.FontProperty = exports.CheckProperty = exports.LongTextProperty = exports.TextProperty = exports.PercentProperty = exports.FloatProperty = exports.IntegerProperty = exports.AnimationParam = exports.EventVarBoolParam = exports.EventVarParam = exports.InstanceVarBoolParam = exports.InstanceVarParam = exports.KeybParam = exports.LayoutParam = exports.LayerParam = exports.ObjectNameParam = exports.ObjectParam = exports.CmpParam = exports.ComboParam = exports.BooleanParam = exports.AnyParam = exports.StringParam = exports.NumberParam = exports.Lost = void 0;
exports.Action = Action;
exports.Condition = Condition;
exports.Expression = Expression;
/**
 * Main
 */
var Lost;
(function (Lost) {
    class Category {
        /**
         *
         * @param Id Category Id
         * @param Name Category displayed name
         * @param Options Options object
         */
        constructor(Id, Name, Options) {
            this.Id = Id;
            this.Name = Name;
            this.Actions = [];
            this.Conditions = [];
            this.Expressions = [];
            this.Options = Options;
            const prototypeActions = Object.getPrototypeOf(this).Actions;
            if (prototypeActions) {
                this.Actions = prototypeActions;
            }
            const prototypeConditions = Object.getPrototypeOf(this).Conditions;
            if (prototypeConditions) {
                this.Conditions = prototypeConditions;
            }
            const prototypeExpressions = Object.getPrototypeOf(this).Expressions;
            if (prototypeExpressions) {
                this.Expressions = prototypeExpressions;
            }
        }
    }
    Lost.Category = Category;
})(Lost || (exports.Lost = Lost = {}));
function Action(Options) {
    return function (target, propertyKey, descriptor) {
        if (!target.constructor.prototype['Actions']) {
            target.constructor.prototype['Actions'] = [];
        }
        const Action = {
            Id: Options.Id,
            Name: Options.Name,
            DisplayText: Options.DisplayText,
            Description: Options.Description || '',
            Options: {
                IsAsync: Options.IsAsync || false,
                ScriptName: propertyKey,
                Script: descriptor.value,
                Highlight: Options.Highlight || false,
                Deprecated: Options.Deprecated || false
            },
            Params: Options.Params || []
        };
        target.constructor.prototype.Actions.push(Action);
    };
}
function Condition(Options) {
    return function (target, propertyKey, descriptor) {
        if (!target.constructor.prototype['Conditions']) {
            target.constructor.prototype['Conditions'] = [];
        }
        const Condition = {
            Id: Options.Id,
            Name: Options.Name,
            DisplayText: Options.DisplayText,
            Description: Options.Description || '',
            Options: {
                IsTrigger: Options.IsTrigger,
                IsFakeTrigger: Options.IsFakeTrigger || false,
                IsStatic: Options.IsStatic || false,
                IsLooping: Options.IsLooping || false,
                IsInvertible: Options.IsInvertible || false,
                IsCompatibleWithTriggers: Options.IsCompatibleWithTriggers || true,
                ScriptName: propertyKey,
                Script: descriptor.value,
                Highlight: Options.Highlight || false,
                Deprecated: Options.Deprecated || false
            },
            Params: Options.Params || []
        };
        target.constructor.prototype.Conditions.push(Condition);
    };
}
function Expression(Options) {
    return function (target, propertyKey, descriptor) {
        if (!target.constructor.prototype['Expressions']) {
            target.constructor.prototype['Expressions'] = [];
        }
        const Expression = {
            Id: Options.Id,
            Name: Options.Name,
            DisplayText: Options.DisplayText,
            Description: Options.Description || '',
            Options: {
                ReturnType: Options.ReturnType,
                IsVariadicParameters: Options.IsVariadicParameters || false,
                ScriptName: propertyKey,
                Script: descriptor.value,
                Highlight: Options.Highlight || false,
                Deprecated: Options.Deprecated || false
            },
            Params: Options.Params || []
        };
        target.constructor.prototype.Expressions.push(Expression);
    };
}
/**
 * Params
 */
(function (Lost) {
    class Param {
        constructor(Options, Type) {
            this.Options = Options;
            this.Type = Type;
        }
        ;
    }
    Lost.Param = Param;
    // ALL PARAMS VARIABLE MUST IN STRING
})(Lost || (exports.Lost = Lost = {}));
/**
* @description A number parameter
*/
class NumberParam extends Lost.Param {
    constructor(Options) {
        super(Options, "number" /* Lost.ParamType.NUMBER */);
    }
}
exports.NumberParam = NumberParam;
/**
 * @description A string parameter
 */
class StringParam extends Lost.Param {
    constructor(Options) {
        super(Options, "string" /* Lost.ParamType.STRING */);
    }
}
exports.StringParam = StringParam;
/**
 * @description Either a number or a string
 */
class AnyParam extends Lost.Param {
    constructor(Options) {
        super(Options, "any" /* Lost.ParamType.ANY */);
    }
}
exports.AnyParam = AnyParam;
/**
 * @description A boolean parameter, displayed as a checkbox
 */
class BooleanParam extends Lost.Param {
    constructor(Options) {
        super(Options, "boolean" /* Lost.ParamType.BOOLEAN */);
    }
}
exports.BooleanParam = BooleanParam;
/**
 * @description A dropdown list. Items must be specified with the "Items" property.
 */
class ComboParam extends Lost.Param {
    constructor(Options) {
        super(Options, "combo" /* Lost.ParamType.COMBO */);
    }
}
exports.ComboParam = ComboParam;
/**
 * @description A dropdown list with comparison options like "equal to", "less than" etc.
 */
class CmpParam extends Lost.Param {
    constructor(Options) {
        super(Options, "cmp" /* Lost.ParamType.CMP */);
    }
}
exports.CmpParam = CmpParam;
/**
 * @description An object picker. The types of plugin to show can be filtered using an optional "allowedPluginIds" property.
 */
class ObjectParam extends Lost.Param {
    constructor(Options) {
        super(Options, "object" /* Lost.ParamType.OBJECT */);
    }
}
exports.ObjectParam = ObjectParam;
/**
 * @description A string parameter which is interpreted as an object name
 */
class ObjectNameParam extends Lost.Param {
    constructor(Options) {
        super(Options, "objectname" /* Lost.ParamType.OBJECT_NAME */);
    }
}
exports.ObjectNameParam = ObjectNameParam;
/**
 * @description A string parameter which is interpreted as a layer name
 */
class LayerParam extends Lost.Param {
    constructor(Options) {
        super(Options, "layer" /* Lost.ParamType.LAYER */);
    }
}
exports.LayerParam = LayerParam;
/**
 * @description A dropdown list with every layout in the project
 */
class LayoutParam extends Lost.Param {
    constructor(Options) {
        super(Options, "layout" /* Lost.ParamType.LAYOUT */);
    }
}
exports.LayoutParam = LayoutParam;
/**
 * @description A keyboard key picker
 */
class KeybParam extends Lost.Param {
    constructor(Options) {
        super(Options, "keyb" /* Lost.ParamType.KEYB */);
    }
}
exports.KeybParam = KeybParam;
/**
 * @description A dropdown list with the non-boolean instance variables the object has
 */
class InstanceVarParam extends Lost.Param {
    constructor(Options) {
        super(Options, "instancevar" /* Lost.ParamType.INSTANCE_VAR */);
    }
}
exports.InstanceVarParam = InstanceVarParam;
/**
 * @description A dropdown list with the boolean instance variables the object has
 */
class InstanceVarBoolParam extends Lost.Param {
    constructor(Options) {
        super(Options, "instancevarbool" /* Lost.ParamType.INSTANCE_VAR_BOOL */);
    }
}
exports.InstanceVarBoolParam = InstanceVarBoolParam;
/**
 * @description A dropdown list with non-boolean event variables in scope
 */
class EventVarParam extends Lost.Param {
    constructor(Options) {
        super(Options, "eventvar" /* Lost.ParamType.EVENT_VAR */);
    }
}
exports.EventVarParam = EventVarParam;
/**
 * @description A dropdown list with boolean event variables in scope
 */
class EventVarBoolParam extends Lost.Param {
    constructor(Options) {
        super(Options, "eventvarbool" /* Lost.ParamType.EVENT_VAR_BOOL */);
    }
}
exports.EventVarBoolParam = EventVarBoolParam;
/**
 * @description A string parameter which is interpreted as an animation name in the object
 */
class AnimationParam extends Lost.Param {
    constructor(Options) {
        super(Options, "animation" /* Lost.ParamType.ANIMATION */);
    }
}
exports.AnimationParam = AnimationParam;
/**
 * Plugin Properties
 */
(function (Lost) {
    let PluginPropertyType;
    (function (PluginPropertyType) {
        PluginPropertyType["INTEGER"] = "integer";
        PluginPropertyType["FLOAT"] = "float";
        PluginPropertyType["PERCENT"] = "percent";
        PluginPropertyType["TEXT"] = "text";
        PluginPropertyType["LONG_TEXT"] = "longtext";
        PluginPropertyType["CHECK"] = "check";
        PluginPropertyType["FONT"] = "font";
        PluginPropertyType["COMBO"] = "combo";
        PluginPropertyType["COLOR"] = "color";
        PluginPropertyType["OBJECT"] = "object";
        PluginPropertyType["GROUP"] = "group"; /**
        creates a new group in the Properties Bar. There is no value associated with this property.
        */
    })(PluginPropertyType = Lost.PluginPropertyType || (Lost.PluginPropertyType = {}));
    class PluginProperty {
        constructor(Options, Type) {
            this.Options = Options;
            this.Type = Type;
        }
    }
    Lost.PluginProperty = PluginProperty;
})(Lost || (exports.Lost = Lost = {}));
/**
 * @description
 * an integer number property, always rounded to a whole number.
 */
class IntegerProperty extends Lost.PluginProperty {
    constructor(Options) {
        super(Options, Lost.PluginPropertyType.INTEGER);
    }
}
exports.IntegerProperty = IntegerProperty;
/**
 * @description
 * a floating-point number property.
 */
class FloatProperty extends Lost.PluginProperty {
    constructor(Options) {
        super(Options, Lost.PluginPropertyType.FLOAT);
    }
}
exports.FloatProperty = FloatProperty;
/**
 * @description
 * a floating-point number in the range [0-1] represented as a percentage. For example if the user enters 50%, the property will be set to a value of 0.5.
 */
class PercentProperty extends Lost.PluginProperty {
    constructor(Options) {
        if (Options.InitialValue > 1)
            Options.InitialValue = 1;
        if (Options.InitialValue < 0)
            Options.InitialValue = 0;
        super(Options, Lost.PluginPropertyType.PERCENT);
    }
}
exports.PercentProperty = PercentProperty;
/**
 * @description a field the user can enter a string in to.
 */
class TextProperty extends Lost.PluginProperty {
    constructor(Options) {
        super(Options, Lost.PluginPropertyType.TEXT);
    }
}
exports.TextProperty = TextProperty;
/**
 * @description the same as "text", but a button with an ellipsis ("...") appears on the right side of the field. The user can click this button to open a dialog to edit a long string more conveniently. This is useful for potentially long content like the project description, or the main text of the Text object.
 */
class LongTextProperty extends Lost.PluginProperty {
    constructor(Options) {
        super(Options, Lost.PluginPropertyType.LONG_TEXT);
    }
}
exports.LongTextProperty = LongTextProperty;
/**
 * @description a checkbox property, returning a boolean.
 */
class CheckProperty extends Lost.PluginProperty {
    constructor(Options) {
        super(Options, Lost.PluginPropertyType.CHECK);
    }
}
exports.CheckProperty = CheckProperty;
/**
 * @description a field which displays the name of a font and provides a button to open a font picker dialog. The property is set to a string of the name of the font.
 */
class FontProperty extends Lost.PluginProperty {
    constructor(Options) {
        super(Options, Lost.PluginPropertyType.FONT);
    }
}
exports.FontProperty = FontProperty;
/**
 * @description a dropdown list property. The property is set to the zero-based index of the chosen item. The items field of the options object must be used to specify the available items.
 */
class ComboProperty extends Lost.PluginProperty {
    constructor(Options) {
        super(Options, Lost.PluginPropertyType.COMBO);
    }
}
exports.ComboProperty = ComboProperty;
/**
 * @description For plugins only — a color picker property. The initial value must be an array, e.g. [1, 0, 0] for red.
 */
class ColorProperty extends Lost.PluginProperty {
    constructor(Options) {
        super(Options, Lost.PluginPropertyType.COLOR);
    }
}
exports.ColorProperty = ColorProperty;
/**
 * @description For plugins only — an object picker property allowing the user to pick an object class. Note: At runtime, this passes a SID (Serialization ID) for the chosen object class, or -1 if none was picked. Use the runtime method GetObjectClassBySID to look up the corresponding ObjectClass.
 */
class ObjectProperty extends Lost.PluginProperty {
    constructor(Options) {
        super(Options, Lost.PluginPropertyType.OBJECT);
    }
}
exports.ObjectProperty = ObjectProperty;
/**
 * @description creates a new group in the Properties Bar. There is no value associated with this property.
 */
class GroupProperty extends Lost.PluginProperty {
    constructor(Options) {
        super(Options, Lost.PluginPropertyType.GROUP);
    }
}
exports.GroupProperty = GroupProperty;
