export declare const enum ParamType {
    NUMBER = "number",// a number parameter
    STRING = "string",// a string parameter
    ANY = "any",// either a number or a string
    BOOLEAN = "boolean",// a boolean parameter, displayed as a checkbox
    COMBO = "combo",// a dropdown list. Items must be specified with the "items" property.
    CMP = "cmp",// a dropdown list with comparison options like "equal to", "less than" etc.
    OBJECT = "object",// an object picker. The types of plugin to show can be filtered using an optional "allowedPluginIds" property.
    OBJECT_NAME = "objectname",// a string parameter which is interpreted as an object name
    LAYER = "layer",// a string parameter which is interpreted as a layer name
    LAYOUT = "layout",// a dropdown list with every layout in the project
    KEYB = "keyb",// a keyboard key picker
    INSTANCE_VAR = "instancevar",// a dropdown list with the non-boolean instance variables the object has
    INSTANCE_VAR_BOOL = "instancevarbool",// a dropdown list with the boolean instance variables the object has
    EVENT_VAR = "eventvar",// a dropdown list with non-boolean event variables in scope
    EVENT_VAR_BOOL = "eventvarbool",// a dropdown list with boolean event variables in scope,
    ANIMATION = "animation"
}
export type ParamOptionsType = ParamOptions | StringParamOptions | ComboParamOptions | ObjectParamOptions;
export declare abstract class Param {
    readonly Type: ParamType;
    readonly Options: ParamOptionsType;
    constructor(Options: ParamOptionsType, Type: ParamType);
}
export interface ParamOptions {
    /**
     * A string with a unique identifier for this parameter. This is used to refer to the parameter in the language file.
     */
    Id: string;
    /**
     * The name of the parameter
     */
    Name: string;
    /**
     * The parameter description
     */
    Description?: string;
    /**
     * A string which is used as the initial expression for expression-based parameters.
     * Note this is still a string for "NumberParam" type parameters.
     * It can contain any valid expression for the parameter, such as "1 + 1".
     * For "BooleanParam" parameters, use a string of either "true" or "false".
     * For "ComboParam" parameters, this is the initial item ID.
     */
    InitialValue?: string;
}
export interface BooleanParamOptions extends ParamOptions {
    InitialValue?: 'true' | 'false';
}
export interface StringParamOptions extends ParamOptions {
    /**
     * Set to a globally unique ID and string constants with the same ID will offer autocomplete in the editor.
     * This is useful for "tag" parameters.
     * Note the ID must be unique to all other plugins and behaviors in Construct, so it is a good idea to include your plugin or behavior name in the string, e.g. "myplugin-tag".
     */
    AutocompleteId?: boolean;
}
export type ComboItem = {
    Id: string;
    Name: string;
};
export interface ComboParamOptions extends ParamOptions {
    /**
     * Set to an array of item IDs available in the dropdown list.
     * The actual displayed text for the items is defined in variable.
     * @example
     * @ComboParam({ Items: ["id1": "Name1", "id2": "Name2"] }) combo = "id1";
     */
    Items: ComboItem[];
}
export interface ObjectParamOptions extends ParamOptions {
    /**
     * An array of plugin ID strings to filter the object picker by.
     * This can also contain the special string "<world>" to allow any world-type plugin.
     */
    AllowedPluginIds?: string[];
}
