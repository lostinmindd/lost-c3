import { BooleanParamOptions, type ComboParamOptions, type ObjectParamOptions, Param, type ParamOptions, type StringParamOptions } from "./Param";
/**
* @description A number parameter
* @functiontype number
*/
export declare class NumberParam extends Param {
    constructor(Options: ParamOptions);
}
/**
 * @description A string parameter
 * @functiontype string
 */
export declare class StringParam extends Param {
    constructor(Options: StringParamOptions);
}
/**
 * @description Either a number or a string
 * @functiontype any
 */
export declare class AnyParam extends Param {
    constructor(Options: ParamOptions);
}
/**
 * @description A boolean parameter, displayed as a checkbox
 * @functiontype boolean
 */
export declare class BooleanParam extends Param {
    constructor(Options: BooleanParamOptions);
}
/**
 * @description A dropdown list. Items must be specified with the "Items" property.
 * @functiontype number (index of chosen item)
 */
export declare class ComboParam extends Param {
    constructor(Options: ComboParamOptions);
}
/**
 * @description A dropdown list with comparison options like "equal to", "less than" etc.
 */
export declare class CmpParam extends Param {
    constructor(Options: ParamOptions);
}
/**
 * @description An object picker. The types of plugin to show can be filtered using an optional "allowedPluginIds" property.
 */
export declare class ObjectParam extends Param {
    constructor(Options: ObjectParamOptions);
}
/**
 * @description A string parameter which is interpreted as an object name
 */
export declare class ObjectNameParam extends Param {
    constructor(Options: ParamOptions);
}
/**
 * @description A string parameter which is interpreted as a layer name
 */
export declare class LayerParam extends Param {
    constructor(Options: ParamOptions);
}
/**
 * @description A dropdown list with every layout in the project
 */
export declare class LayoutParam extends Param {
    constructor(Options: ParamOptions);
}
/**
 * @description A keyboard key picker
 */
export declare class KeybParam extends Param {
    constructor(Options: ParamOptions);
}
/**
 * @description A dropdown list with the non-boolean instance variables the object has
 */
export declare class InstanceVarParam extends Param {
    constructor(Options: ParamOptions);
}
/**
 * @description A dropdown list with the boolean instance variables the object has
 */
export declare class InstanceVarBoolParam extends Param {
    constructor(Options: ParamOptions);
}
/**
 * @description A dropdown list with non-boolean event variables in scope
 */
export declare class EventVarParam extends Param {
    constructor(Options: ParamOptions);
}
/**
 * @description A dropdown list with boolean event variables in scope
 */
export declare class EventVarBoolParam extends Param {
    constructor(Options: ParamOptions);
}
/**
 * @description A string parameter which is interpreted as an animation name in the object
 */
export declare class AnimationParam extends Param {
    constructor(Options: ParamOptions);
}
