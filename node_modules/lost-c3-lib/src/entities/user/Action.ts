import type { Action } from "../system/Action";
import type { Param } from "../../params/Param";
import type { EntityOptions } from "./Entity";
import type { LostCategory } from "../../category/Category";

export interface ActionOptions extends EntityOptions {
    /**
     * Set to true to mark the action as asynchronous. 
     * Make the action method an async function, and the system Wait for previous actions to complete action will be able to wait for the action as well.
     */
    IsAsync?: boolean
    Params?: Param[];
}

export function Action(Options: ActionOptions) {
    return function (target: LostCategory, propertyKey: string, descriptor: PropertyDescriptor) {

        if (!target.constructor.prototype['Actions']) {
            target.constructor.prototype['Actions'] = [];
        }

        const Action: Action = {
            Id: Options.Id,
            Name: Options.Name,
            DisplayText: Options.DisplayText,
            Description: Options.Description || '',
            Options: {
                IsAsync: Options.IsAsync || false,

                ScriptName: propertyKey,
                Script: descriptor.value,
                Highlight: Options.Highlight || false,
                Deprecated: Options.Deprecated || false
            },
            Params: Options.Params || []
        }
        target.constructor.prototype.Actions.push(Action);
    };
}