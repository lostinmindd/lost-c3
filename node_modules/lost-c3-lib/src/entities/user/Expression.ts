import type { Expression } from "../system/Expression";
import type { ExpressionEntityOptions } from "./Entity";
import type { LostCategory } from "../../category/Category";
import type { AnyParam, NumberParam, StringParam } from "../../params/ParamsCollection";

export interface ExpressionOptions extends ExpressionEntityOptions {
    /**
     * One of "number", "string", "any". 
     * The runtime function must return the corresponding type, and "any" must still return either a number or a string.
     */
    ReturnType: 'number' | 'string' | 'any',
    /**
     * If true, Construct 3 will allow the user to enter any number of parameters beyond those defined. 
     * In other words the parameters (if any) listed in "params" are required, but this flag enables adding further "any" type parameters beyond the end.
     */
    IsVariadicParameters?: boolean;
    Params?: (StringParam | NumberParam | AnyParam)[];
}

export function Expression(Options: ExpressionOptions): any {
    return function (target: LostCategory, propertyKey: string, descriptor: PropertyDescriptor) {

        if (!target.constructor.prototype['Expressions']) {
            target.constructor.prototype['Expressions'] = [];
        }

        const Expression: Expression = {
            Id: Options.Id,
            Name: Options.Name,
            Description: Options.Description || '',
            Options: {
                ReturnType: Options.ReturnType,
                IsVariadicParameters: Options.IsVariadicParameters || false,

                ScriptName: propertyKey,
                Script: descriptor.value,
                Highlight: Options.Highlight || false,
                Deprecated: Options.Deprecated || false
            },
            Params: Options.Params || []
        }
        target.constructor.prototype.Expressions.push(Expression);
    };
}