import type { Action } from "../entities/system/Action";
import type { Condition } from "../entities/system/Condition";
import type { Expression } from "../entities/system/Expression";

interface CategoryOptions {
    /**
     * Category id to indetify, must me unique for all addon.
     */
    readonly Id: string;
    /**
     * Category name that will be displayed in Construct 3.
     */
    readonly Name: string;
    /**
     * If True, all category Actions/Conditions/Expressions will not include in addon.
     */
    readonly InDevelopment: boolean;
    /**
     * If True, all category Actions/Conditions/Expressions will mark as Deprecated.
     */
    readonly Deprecated?: boolean;
}

export class LostCategory {
    readonly Id: string;
    readonly Name: string;
    
    readonly Deprecated: boolean = false;
    readonly InDevelopment: boolean = false;

    readonly Actions: Action[];
    readonly Conditions: Condition[];
    readonly Expressions: Expression[];

    constructor(Options: CategoryOptions) {
        this.Id = Options.Id;
        this.Name = Options.Name;

        this.Deprecated = Options.Deprecated || this.Deprecated;
        this.InDevelopment = Options.InDevelopment || this.InDevelopment;

        this.Actions = [];
        this.Conditions = [];
        this.Expressions = [];

        const prototypeActions = Object.getPrototypeOf(this).Actions;
        if (prototypeActions) {
            this.Actions = prototypeActions;
        }

        const prototypeConditions = Object.getPrototypeOf(this).Conditions;
        if (prototypeConditions) {
            this.Conditions = prototypeConditions;
        }

        const prototypeExpressions = Object.getPrototypeOf(this).Expressions;
        if (prototypeExpressions) {
            this.Expressions = prototypeExpressions;
        }
    }
}