import type { ComboItem } from "../params/Param.ts";

export enum PluginPropertyType {
    INTEGER = "integer", /**
     * an integer number property, always rounded to a whole number.
     */
    FLOAT = "float", /**
     * a floating-point number property.
     */
    PERCENT = "percent", /**
     * a floating-point number in the range [0-1] represented as a percentage. 
    For example if the user enters 50%, the property will be set to a value of 0.5.
     */
    TEXT = "text", /**
     * a field the user can enter a string in to.
     */
    LONG_TEXT = "longtext", /**
     * the same as "text", but a button with an ellipsis ("...") appears on the right side of the field. 
    The user can click this button to open a dialog to edit a long string more conveniently. 
    This is useful for potentially long content like the project description, or the main text of the Text object.
     */
    CHECK = "check", /**
     * a checkbox property, returning a boolean.
     */
    FONT = "font", /**
     * a field which displays the name of a font and provides a button to open a font picker dialog. 
    The property is set to a string of the name of the font.
     */
    COMBO = "combo", /**
     * a dropdown list property. 
    The property is set to the zero-based index of the chosen item. 
    The items field of the options object must be used to specify the available items.
     */
    COLOR = "color", /**
     * For plugins only — a color picker property. 
    The initial value must be an array, e.g. [1, 0, 0] for red.
     */
    OBJECT = "object", /**
    For plugins only — an object picker property allowing the user to pick an object class. 
    Note: At runtime, this passes a SID (Serialization ID) for the chosen object class, or -1 if none was picked.
     Use the runtime method GetObjectClassBySID to look up the corresponding ObjectClass. 
     */
    GROUP = "group" /**
    creates a new group in the Properties Bar. There is no value associated with this property. 
    */
}

type PluginPropertyOptions = DefaultPluginPropertyOptions | IntegerPropertyOptions | FloatPropertyOptions | PercentPropertyOptions | TextPropertyOptions | LongTextPropertyOptions | CheckPropertyOptions | FontPropertyOptions | ComboPropertyOptions | ColorPropertyOptions | ObjectPropertyOptions | GroupPropertyOptions;

export abstract class PluginProperty {
    readonly Type: PluginPropertyType;
    readonly Options: PluginPropertyOptions;
    constructor(Options: PluginPropertyOptions, Type: PluginPropertyType) {
        this.Options = Options;
        this.Type = Type;
    }
}

interface DefaultPluginPropertyOptions {
    Id: string;
    Name: string;
    Description?: string;
}

export interface IntegerPropertyOptions extends DefaultPluginPropertyOptions {
    InitialValue: number;
}

export interface FloatPropertyOptions extends DefaultPluginPropertyOptions {
    InitialValue: number;
}

export interface PercentPropertyOptions extends DefaultPluginPropertyOptions {
    InitialValue: number;
}

export interface TextPropertyOptions extends DefaultPluginPropertyOptions {
    InitialValue: string;
}

export interface LongTextPropertyOptions extends DefaultPluginPropertyOptions {
    InitialValue: string;
}

export interface CheckPropertyOptions extends DefaultPluginPropertyOptions {
    InitialValue: boolean;
}

export interface FontPropertyOptions extends DefaultPluginPropertyOptions {
    /**
     * @description
     * Initial font-name
     */
    InitialValue: string;
}

export interface ComboPropertyOptions extends DefaultPluginPropertyOptions {
    InitialValue: string;
    Items: ComboItem[];
}

export interface ColorPropertyOptions extends DefaultPluginPropertyOptions {
    /**
     * Number array of color from 0 to 1
     * @example [0, 0, 0] -> Black
     */
    InitialValue: [number, number, number];
}

export interface ObjectPropertyOptions extends DefaultPluginPropertyOptions {
    AllowedPluginIds?: string[];
}

export interface GroupPropertyOptions extends DefaultPluginPropertyOptions {}