import { 
    type CheckPropertyOptions, type ColorPropertyOptions, type ComboPropertyOptions, 
    type FloatPropertyOptions, type FontPropertyOptions, type GroupPropertyOptions, 
    type IntegerPropertyOptions, type LongTextPropertyOptions, 
    type ObjectPropertyOptions, type PercentPropertyOptions, type TextPropertyOptions,
    PluginProperty, PluginPropertyType } from "./PluginProperty";

/**
 * @description
 * an integer number property, always rounded to a whole number.
 */
export class IntegerProperty extends PluginProperty {
    constructor(Options: IntegerPropertyOptions) {
        super(Options, PluginPropertyType.INTEGER);
    }
}

/**
 * @description
 * a floating-point number property.
 */
export class FloatProperty extends PluginProperty {
    constructor(Options: FloatPropertyOptions) {
        super(Options, PluginPropertyType.FLOAT);
    }
}

/**
 * @description
 * a floating-point number in the range [0-1] represented as a percentage. For example if the user enters 50%, the property will be set to a value of 0.5.
 */
export class PercentProperty extends PluginProperty {
    constructor(Options: PercentPropertyOptions) {
        if (Options.InitialValue > 1) Options.InitialValue = 1;
        if (Options.InitialValue < 0) Options.InitialValue = 0;
        super(Options, PluginPropertyType.PERCENT);
    }
}

/**
 * @description a field the user can enter a string in to.
 */
export class TextProperty extends PluginProperty {
    constructor(Options: TextPropertyOptions) {
        super(Options, PluginPropertyType.TEXT);
    }
}

/**
 * @description the same as "text", but a button with an ellipsis ("...") appears on the right side of the field. The user can click this button to open a dialog to edit a long string more conveniently. This is useful for potentially long content like the project description, or the main text of the Text object.
 */
export class LongTextProperty extends PluginProperty {
    constructor(Options: LongTextPropertyOptions) {
        super(Options, PluginPropertyType.LONG_TEXT);
    }
}

/**
 * @description a checkbox property, returning a boolean.
 */
export class CheckProperty extends PluginProperty {
    constructor(Options: CheckPropertyOptions) {
        super(Options, PluginPropertyType.CHECK);
    }
}

/**
 * @description a field which displays the name of a font and provides a button to open a font picker dialog. The property is set to a string of the name of the font.
 */
export class FontProperty extends PluginProperty {
    constructor(Options: FontPropertyOptions) {
        super(Options, PluginPropertyType.FONT);
    }
}

/**
 * @description a dropdown list property. The property is set to the zero-based index of the chosen item. The items field of the options object must be used to specify the available items.
 */
export class ComboProperty extends PluginProperty {
    constructor(Options: ComboPropertyOptions) {
        super(Options, PluginPropertyType.COMBO);
    }
}

/**
 * @description For plugins only — a color picker property. The initial value must be an array, e.g. [1, 0, 0] for red.
 */
export class ColorProperty extends PluginProperty {
    constructor(Options: ColorPropertyOptions) {
        super(Options, PluginPropertyType.COLOR);
    }
}

/**
 * @description For plugins only — an object picker property allowing the user to pick an object class. Note: At runtime, this passes a SID (Serialization ID) for the chosen object class, or -1 if none was picked. Use the runtime method GetObjectClassBySID to look up the corresponding ObjectClass.
 */
export class ObjectProperty extends PluginProperty {
    constructor(Options: ObjectPropertyOptions) {
        super(Options, PluginPropertyType.OBJECT);
    }
}

/**
 * @description creates a new group in the Properties Bar. There is no value associated with this property.
 */
export class GroupProperty extends PluginProperty {
    constructor(Options: GroupPropertyOptions) {
        super(Options, PluginPropertyType.GROUP);
    }
}