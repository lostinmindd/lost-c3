import { type ComboParamOptions, type ObjectParamOptions, Param, type ParamOptions, ParamType, type StringParamOptions } from "./Param";

/**
* @description A number parameter
* @functiontype number
*/
export class NumberParam extends Param { 
    constructor(Options: ParamOptions) {
        super(Options, ParamType.NUMBER);
    }
}

/**
 * @description A string parameter
 * @functiontype string
 */
export class StringParam extends Param {
    constructor(Options: StringParamOptions) {
        super(Options, ParamType.STRING);
    }
}

/**
 * @description Either a number or a string
 * @functiontype any
 */
export class AnyParam extends Param { 
    constructor(Options: ParamOptions) {
        super(Options, ParamType.ANY);
    }
}

/**
 * @description A boolean parameter, displayed as a checkbox
 * @functiontype boolean
 */
export class BooleanParam extends Param { 
    constructor(Options: ParamOptions) {
        super(Options, ParamType.BOOLEAN);
    }
}

/**
 * @description A dropdown list. Items must be specified with the "Items" property.
 * @functiontype number (index of chosen item)
 */
export class ComboParam extends Param { 
    constructor(Options: ComboParamOptions) {
        super(Options, ParamType.COMBO);
    }
}

/**
 * @description A dropdown list with comparison options like "equal to", "less than" etc.
 */
export class CmpParam extends Param { 
    constructor(Options: ParamOptions) {
        super(Options, ParamType.CMP);
    }
}

/**
 * @description An object picker. The types of plugin to show can be filtered using an optional "allowedPluginIds" property.
 */
export class ObjectParam extends Param { 
    constructor(Options: ObjectParamOptions) {
        super(Options, ParamType.OBJECT);
    }
}

/**
 * @description A string parameter which is interpreted as an object name
 */
export class ObjectNameParam extends Param { 
    constructor(Options: ParamOptions) {
        super(Options, ParamType.OBJECT_NAME);
    }
}

/**
 * @description A string parameter which is interpreted as a layer name
 */
export class LayerParam extends Param { 
    constructor(Options: ParamOptions) {
        super(Options, ParamType.LAYER);
    }
}

/**
 * @description A dropdown list with every layout in the project
 */
export class LayoutParam extends Param { 
    constructor(Options: ParamOptions) {
        super(Options, ParamType.LAYOUT);
    }
}

/**
 * @description A keyboard key picker
 */
export class KeybParam extends Param { 
    constructor(Options: ParamOptions) {
        super(Options, ParamType.KEYB);
    }
}

/**
 * @description A dropdown list with the non-boolean instance variables the object has
 */
export class InstanceVarParam extends Param { 
    constructor(Options: ParamOptions) {
        super(Options, ParamType.INSTANCE_VAR);
    }
}

/**
 * @description A dropdown list with the boolean instance variables the object has
 */
export class InstanceVarBoolParam extends Param { 
    constructor(Options: ParamOptions) {
        super(Options, ParamType.INSTANCE_VAR_BOOL);
    }
}

/**
 * @description A dropdown list with non-boolean event variables in scope
 */
export class EventVarParam extends Param { 
    constructor(Options: ParamOptions) {
        super(Options, ParamType.EVENT_VAR);
    }
}

/**
 * @description A dropdown list with boolean event variables in scope
 */
export class EventVarBoolParam extends Param { 
    constructor(Options: ParamOptions) {
        super(Options, ParamType.EVENT_VAR_BOOL);
    }
}

/**
 * @description A string parameter which is interpreted as an animation name in the object
 */
export class AnimationParam extends Param {
    constructor(Options: ParamOptions) {
        super(Options, ParamType.ANIMATION);
    }
}