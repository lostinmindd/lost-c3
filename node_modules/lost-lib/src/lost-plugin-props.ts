import { ComboItemType } from "./lost-params";

export const enum PropertyType {
    INTEGER = "integer", /**
     * an integer number property, always rounded to a whole number.
     */
    FLOAT = "float", /**
     * a floating-point number property.
     */
    PERCENT = "percent", /**
     * a floating-point number in the range [0-1] represented as a percentage. 
    For example if the user enters 50%, the property will be set to a value of 0.5.
     */
    TEXT = "text", /**
     * a field the user can enter a string in to.
     */
    LONG_TEXT = "longtext", /**
     * the same as "text", but a button with an ellipsis ("...") appears on the right side of the field. 
    The user can click this button to open a dialog to edit a long string more conveniently. 
    This is useful for potentially long content like the project description, or the main text of the Text object.
     */
    CHECK = "check", /**
     * a checkbox property, returning a boolean.
     */
    FONT = "font", /**
     * a field which displays the name of a font and provides a button to open a font picker dialog. 
    The property is set to a string of the name of the font.
     */
    COMBO = "combo", /**
     * a dropdown list property. 
    The property is set to the zero-based index of the chosen item. 
    The items field of the options object must be used to specify the available items.
     */
    COLOR = "color", /**
     * For plugins only — a color picker property. 
    The initial value must be an array, e.g. [1, 0, 0] for red.
     */
    OBJECT = "object", /**
    For plugins only — an object picker property allowing the user to pick an object class. 
    Note: At runtime, this passes a SID (Serialization ID) for the chosen object class, or -1 if none was picked.
     Use the runtime method GetObjectClassBySID to look up the corresponding ObjectClass. 
     */
    GROUP = "group" /**
    creates a new group in the Properties Bar. There is no value associated with this property. 
    */
}

export type LostPluginPropertyType = 
    IntegerProperty | FloatProperty | PercentProperty |
    TextProperty | LongTextProperty | CheckProperty |
    FontProperty | ComboProperty | ColorProperty |
    ObjectProperty | GroupProperty

export type PropertyOptionsType = 
    ILostPluginPropertyOptions | IIntegerPropertyOptions | 
    IFloatPropertyOptions | IPercentPropertyOptions |
    ITextPropertyOptions | ILongTextPropertyOptions |
    ICheckPropertyOptions | IFontPropertyOptions |
    IComboPropertyOptions | IColorPropertyOptions |
    IObjectPropertyOptions | IGroupPropertyOptions

interface ILostPluginPropertyOptions {
    Id: string;
    Name: string;
    Description?: string;
}

abstract class LostPluginProperty {
    readonly Type: PropertyType;
    readonly Options: PropertyOptionsType;
    constructor(Options: PropertyOptionsType, Type: PropertyType) {
        this.Options = Options;
        this.Type = Type;
    }
}

/**
 * ------------------------INTEGER PROPERTY--------------------------
 */
export interface IIntegerPropertyOptions extends ILostPluginPropertyOptions {
    InitialValue: number;
}

/**
 * @description
 * an integer number property, always rounded to a whole number.
 */
export class IntegerProperty extends LostPluginProperty {
    constructor(Options: IIntegerPropertyOptions) {
        super(Options, PropertyType.INTEGER);
    }
}

/**
 * ------------------------FLOAT PROPERTY--------------------------
 */
export interface IFloatPropertyOptions extends ILostPluginPropertyOptions {
    InitialValue: number;
}

/**
 * @description
 * a floating-point number property.
 */
export class FloatProperty extends LostPluginProperty {
    constructor(Options: IFloatPropertyOptions) {
        super(Options, PropertyType.FLOAT);
    }
}

/**
 * ------------------------PERCENT PROPERTY--------------------------
 */
export interface IPercentPropertyOptions extends ILostPluginPropertyOptions {
    InitialValue: number;
}

/**
 * @description
 * a floating-point number in the range [0-1] represented as a percentage. For example if the user enters 50%, the property will be set to a value of 0.5.
 */
export class PercentProperty extends LostPluginProperty {
    constructor(Options: IPercentPropertyOptions) {
        if (Options.InitialValue > 1) Options.InitialValue = 1;
        if (Options.InitialValue < 0) Options.InitialValue = 0;
        super(Options, PropertyType.PERCENT);
    }
}

/**
 * ------------------------TEXT PROPERTY--------------------------
 */
export interface ITextPropertyOptions extends ILostPluginPropertyOptions {
    InitialValue: string;
}

/**
 * @description a field the user can enter a string in to.
 */
export class TextProperty extends LostPluginProperty {
    constructor(Options: ITextPropertyOptions) {
        super(Options, PropertyType.TEXT);
    }
}

/**
 * ------------------------LONG TEXT PROPERTY--------------------------
 */
export interface ILongTextPropertyOptions extends ILostPluginPropertyOptions {
    InitialValue: string;
}

/**
 * @description the same as "text", but a button with an ellipsis ("...") appears on the right side of the field. The user can click this button to open a dialog to edit a long string more conveniently. This is useful for potentially long content like the project description, or the main text of the Text object.
 */
export class LongTextProperty extends LostPluginProperty {
    constructor(Options: ILongTextPropertyOptions) {
        super(Options, PropertyType.LONG_TEXT);
    }
}

/**
 * ------------------------CHECK PROPERTY--------------------------
 */
export interface ICheckPropertyOptions extends ILostPluginPropertyOptions {
    InitialValue: boolean;
}

/**
 * @description a checkbox property, returning a boolean.
 */
export class CheckProperty extends LostPluginProperty {
    constructor(Options: ICheckPropertyOptions) {
        super(Options, PropertyType.CHECK);
    }
}

/**
 * ------------------------FONT PROPERTY--------------------------
 */
export interface IFontPropertyOptions extends ILostPluginPropertyOptions {
    /**
     * @description
     * Initial font-name
     */
    InitialValue: string;
}

/**
 * @description a field which displays the name of a font and provides a button to open a font picker dialog. The property is set to a string of the name of the font.
 */
export class FontProperty extends LostPluginProperty {
    constructor(Options: IFontPropertyOptions) {
        super(Options, PropertyType.FONT);
    }
}

/**
 * ------------------------COMBO PROPERTY--------------------------
 */

export interface IComboPropertyOptions extends ILostPluginPropertyOptions {
    InitialValue: string;
    Items: ComboItemType[];
}

/**
 * @description a dropdown list property. The property is set to the zero-based index of the chosen item. The items field of the options object must be used to specify the available items.
 */
export class ComboProperty extends LostPluginProperty {
    constructor(Options: IComboPropertyOptions) {
        super(Options, PropertyType.COMBO);
    }
}

/**
 * ------------------------COLOR PROPERTY--------------------------
 */
export interface IColorPropertyOptions extends ILostPluginPropertyOptions {
    InitialValue: [number, number, number];
}

/**
 * @description For plugins only — a color picker property. The initial value must be an array, e.g. [1, 0, 0] for red.
 */
export class ColorProperty extends LostPluginProperty {
    constructor(Options: IColorPropertyOptions) {
        super(Options, PropertyType.COLOR);
    }
}

/**
 * ------------------------OBJECT PROPERTY--------------------------
 */
export interface IObjectPropertyOptions extends ILostPluginPropertyOptions {

}

/**
 * @description For plugins only — an object picker property allowing the user to pick an object class. Note: At runtime, this passes a SID (Serialization ID) for the chosen object class, or -1 if none was picked. Use the runtime method GetObjectClassBySID to look up the corresponding ObjectClass.
 */
export class ObjectProperty extends LostPluginProperty {
    constructor(Options: IObjectPropertyOptions) {
        super(Options, PropertyType.OBJECT);
    }
}

/**
 * ------------------------GROUP PROPERTY--------------------------
 */
export interface IGroupPropertyOptions extends ILostPluginPropertyOptions {

}

/**
 * @description creates a new group in the Properties Bar. There is no value associated with this property.
 */
export class GroupProperty extends LostPluginProperty {
    constructor(Options: IGroupPropertyOptions) {
        super(Options, PropertyType.GROUP);
    }
}
