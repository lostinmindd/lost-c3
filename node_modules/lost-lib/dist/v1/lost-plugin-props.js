"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupProperty = exports.ObjectProperty = exports.ColorProperty = exports.ComboProperty = exports.FontProperty = exports.CheckProperty = exports.LongTextProperty = exports.TextProperty = exports.PercentProperty = exports.FloatProperty = exports.IntegerProperty = void 0;
class LostPluginProperty {
    constructor(Options, Type) {
        this.Options = Options;
        this.Type = Type;
    }
}
/**
 * @description
 * an integer number property, always rounded to a whole number.
 */
class IntegerProperty extends LostPluginProperty {
    constructor(Options) {
        super(Options, "integer" /* PropertyType.INTEGER */);
    }
}
exports.IntegerProperty = IntegerProperty;
/**
 * @description
 * a floating-point number property.
 */
class FloatProperty extends LostPluginProperty {
    constructor(Options) {
        super(Options, "float" /* PropertyType.FLOAT */);
    }
}
exports.FloatProperty = FloatProperty;
/**
 * @description
 * a floating-point number in the range [0-1] represented as a percentage. For example if the user enters 50%, the property will be set to a value of 0.5.
 */
class PercentProperty extends LostPluginProperty {
    constructor(Options) {
        if (Options.InitialValue > 1)
            Options.InitialValue = 1;
        if (Options.InitialValue < 0)
            Options.InitialValue = 0;
        super(Options, "percent" /* PropertyType.PERCENT */);
    }
}
exports.PercentProperty = PercentProperty;
/**
 * @description a field the user can enter a string in to.
 */
class TextProperty extends LostPluginProperty {
    constructor(Options) {
        super(Options, "text" /* PropertyType.TEXT */);
    }
}
exports.TextProperty = TextProperty;
/**
 * @description the same as "text", but a button with an ellipsis ("...") appears on the right side of the field. The user can click this button to open a dialog to edit a long string more conveniently. This is useful for potentially long content like the project description, or the main text of the Text object.
 */
class LongTextProperty extends LostPluginProperty {
    constructor(Options) {
        super(Options, "longtext" /* PropertyType.LONG_TEXT */);
    }
}
exports.LongTextProperty = LongTextProperty;
/**
 * @description a checkbox property, returning a boolean.
 */
class CheckProperty extends LostPluginProperty {
    constructor(Options) {
        super(Options, "check" /* PropertyType.CHECK */);
    }
}
exports.CheckProperty = CheckProperty;
/**
 * @description a field which displays the name of a font and provides a button to open a font picker dialog. The property is set to a string of the name of the font.
 */
class FontProperty extends LostPluginProperty {
    constructor(Options) {
        super(Options, "font" /* PropertyType.FONT */);
    }
}
exports.FontProperty = FontProperty;
/**
 * @description a dropdown list property. The property is set to the zero-based index of the chosen item. The items field of the options object must be used to specify the available items.
 */
class ComboProperty extends LostPluginProperty {
    constructor(Options) {
        super(Options, "combo" /* PropertyType.COMBO */);
    }
}
exports.ComboProperty = ComboProperty;
/**
 * @description For plugins only — a color picker property. The initial value must be an array, e.g. [1, 0, 0] for red.
 */
class ColorProperty extends LostPluginProperty {
    constructor(Options) {
        super(Options, "color" /* PropertyType.COLOR */);
    }
}
exports.ColorProperty = ColorProperty;
/**
 * @description For plugins only — an object picker property allowing the user to pick an object class. Note: At runtime, this passes a SID (Serialization ID) for the chosen object class, or -1 if none was picked. Use the runtime method GetObjectClassBySID to look up the corresponding ObjectClass.
 */
class ObjectProperty extends LostPluginProperty {
    constructor(Options) {
        super(Options, "object" /* PropertyType.OBJECT */);
    }
}
exports.ObjectProperty = ObjectProperty;
/**
 * @description creates a new group in the Properties Bar. There is no value associated with this property.
 */
class GroupProperty extends LostPluginProperty {
    constructor(Options) {
        super(Options, "group" /* PropertyType.GROUP */);
    }
}
exports.GroupProperty = GroupProperty;
