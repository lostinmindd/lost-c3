"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnimationParam = exports.EventVarBoolParam = exports.EventVarParam = exports.InstanceVarBoolParam = exports.InstanceVarParam = exports.KeybParam = exports.LayoutParam = exports.LayerParam = exports.ObjectNameParam = exports.ObjectParam = exports.CmpParam = exports.ComboParam = exports.BooleanParam = exports.AnyParam = exports.StringParam = exports.NumberParam = exports.Param = void 0;
class Param {
    constructor(Options, Type) {
        this.Options = Options;
        this.Type = Type;
    }
    ;
}
exports.Param = Param;
/**
 * @description a number parameter
 */
class NumberParam extends Param {
    constructor(Options) {
        super(Options, "number" /* ParamType.NUMBER */);
    }
}
exports.NumberParam = NumberParam;
/**
 * @description a string parameter
 */
class StringParam extends Param {
    constructor(Options) {
        super(Options, "string" /* ParamType.STRING */);
    }
}
exports.StringParam = StringParam;
/**
 * @description either a number or a string
 */
class AnyParam extends Param {
    constructor(Options) {
        super(Options, "any" /* ParamType.ANY */);
    }
}
exports.AnyParam = AnyParam;
/**
 * @description a boolean parameter, displayed as a checkbox
 */
class BooleanParam extends Param {
    constructor(Options) {
        super(Options, "boolean" /* ParamType.BOOLEAN */);
    }
}
exports.BooleanParam = BooleanParam;
/**
 * @description a dropdown list. Items must be specified with the "items" property.
 */
class ComboParam extends Param {
    constructor(Options) {
        super(Options, "combo" /* ParamType.COMBO */);
    }
}
exports.ComboParam = ComboParam;
/**
 * @description a dropdown list with comparison options like "equal to", "less than" etc.
 */
class CmpParam extends Param {
    constructor(Options) {
        super(Options, "cmp" /* ParamType.CMP */);
    }
}
exports.CmpParam = CmpParam;
/**
 * @description an object picker. The types of plugin to show can be filtered using an optional "allowedPluginIds" property.
 */
class ObjectParam extends Param {
    constructor(Options) {
        super(Options, "object" /* ParamType.OBJECT */);
    }
}
exports.ObjectParam = ObjectParam;
/**
 * @description a string parameter which is interpreted as an object name
 */
class ObjectNameParam extends Param {
    constructor(Options) {
        super(Options, "objectname" /* ParamType.OBJECT_NAME */);
    }
}
exports.ObjectNameParam = ObjectNameParam;
/**
 * @description a string parameter which is interpreted as a layer name
 */
class LayerParam extends Param {
    constructor(Options) {
        super(Options, "layer" /* ParamType.LAYER */);
    }
}
exports.LayerParam = LayerParam;
/**
 * @description a dropdown list with every layout in the project
 */
class LayoutParam extends Param {
    constructor(Options) {
        super(Options, "layout" /* ParamType.LAYOUT */);
    }
}
exports.LayoutParam = LayoutParam;
/**
 * @description a keyboard key picker
 */
class KeybParam extends Param {
    constructor(Options) {
        super(Options, "keyb" /* ParamType.KEYB */);
    }
}
exports.KeybParam = KeybParam;
/**
 * @description a dropdown list with the non-boolean instance variables the object has
 */
class InstanceVarParam extends Param {
    constructor(Options) {
        super(Options, "instancevar" /* ParamType.INSTANCE_VAR */);
    }
}
exports.InstanceVarParam = InstanceVarParam;
/**
 * @description a dropdown list with the boolean instance variables the object has
 */
class InstanceVarBoolParam extends Param {
    constructor(Options) {
        super(Options, "instancevarbool" /* ParamType.INSTANCE_VAR_BOOL */);
    }
}
exports.InstanceVarBoolParam = InstanceVarBoolParam;
/**
 * @description a dropdown list with non-boolean event variables in scope
 */
class EventVarParam extends Param {
    constructor(Options) {
        super(Options, "eventvar" /* ParamType.EVENT_VAR */);
    }
}
exports.EventVarParam = EventVarParam;
/**
 * @description a dropdown list with boolean event variables in scope
 */
class EventVarBoolParam extends Param {
    constructor(Options) {
        super(Options, "eventvarbool" /* ParamType.EVENT_VAR_BOOL */);
    }
}
exports.EventVarBoolParam = EventVarBoolParam;
/**
 * @description a string parameter which is interpreted as an animation name in the object
 */
class AnimationParam extends Param {
    constructor(Options) {
        super(Options, "animation" /* ParamType.ANIMATION */);
    }
}
exports.AnimationParam = AnimationParam;
AnimationParam.Type = "animation";
