export declare const enum ParamType {
    NUMBER = "number",// a number parameter
    STRING = "string",// a string parameter
    ANY = "any",// either a number or a string
    BOOLEAN = "boolean",// a boolean parameter, displayed as a checkbox
    COMBO = "combo",// a dropdown list. Items must be specified with the "items" property.
    CMP = "cmp",// a dropdown list with comparison options like "equal to", "less than" etc.
    OBJECT = "object",// an object picker. The types of plugin to show can be filtered using an optional "allowedPluginIds" property.
    OBJECT_NAME = "objectname",// a string parameter which is interpreted as an object name
    LAYER = "layer",// a string parameter which is interpreted as a layer name
    LAYOUT = "layout",// a dropdown list with every layout in the project
    KEYB = "keyb",// a keyboard key picker
    INSTANCE_VAR = "instancevar",// a dropdown list with the non-boolean instance variables the object has
    INSTANCE_VAR_BOOL = "instancevarbool",// a dropdown list with the boolean instance variables the object has
    EVENT_VAR = "eventvar",// a dropdown list with non-boolean event variables in scope
    EVENT_VAR_BOOL = "eventvarbool",// a dropdown list with boolean event variables in scope,
    ANIMATION = "animation"
}
export type ParamOptionsType = IParamOptions | IStringOptions | IComboOptions | IObjectOptions;
export declare abstract class Param {
    readonly Type: ParamType;
    readonly Options: ParamOptionsType;
    constructor(Options: IParamOptions, Type: ParamType);
}
export interface IParamOptions {
    Id: string;
    Name: string;
    Description?: string;
    InitialValue?: string;
}
/**
 * @description a number parameter
 */
export declare class NumberParam extends Param {
    constructor(Options: IParamOptions);
}
export interface IStringOptions extends IParamOptions {
    AutocompleteId?: boolean;
}
/**
 * @description a string parameter
 */
export declare class StringParam extends Param {
    constructor(Options: IStringOptions);
}
/**
 * @description either a number or a string
 */
export declare class AnyParam extends Param {
    constructor(Options: IParamOptions);
}
/**
 * @description a boolean parameter, displayed as a checkbox
 */
export declare class BooleanParam extends Param {
    constructor(Options: IParamOptions);
}
export type ComboItemType = {
    Id: string;
    Name: string;
};
export interface IComboOptions extends IParamOptions {
    /**
     * Set to an array of item IDs available in the dropdown list.
     */
    Items: ComboItemType[];
}
/**
 * @description a dropdown list. Items must be specified with the "items" property.
 */
export declare class ComboParam extends Param {
    constructor(Options: IComboOptions);
}
/**
 * @description a dropdown list with comparison options like "equal to", "less than" etc.
 */
export declare class CmpParam extends Param {
    constructor(Options: IParamOptions);
}
export interface IObjectOptions extends IParamOptions {
    /**
     * Set to an array of plugin IDs allowed to be shown by the object picker.
     * For example, use ["Sprite"] to only allow the object parameter to select a Sprite.
     */
    AllowedPluginIds?: string[];
}
/**
 * @description an object picker. The types of plugin to show can be filtered using an optional "allowedPluginIds" property.
 */
export declare class ObjectParam extends Param {
    constructor(Options: IObjectOptions);
}
/**
 * @description a string parameter which is interpreted as an object name
 */
export declare class ObjectNameParam extends Param {
    constructor(Options: IParamOptions);
}
/**
 * @description a string parameter which is interpreted as a layer name
 */
export declare class LayerParam extends Param {
    constructor(Options: IParamOptions);
}
/**
 * @description a dropdown list with every layout in the project
 */
export declare class LayoutParam extends Param {
    constructor(Options: IParamOptions);
}
/**
 * @description a keyboard key picker
 */
export declare class KeybParam extends Param {
    constructor(Options: IParamOptions);
}
/**
 * @description a dropdown list with the non-boolean instance variables the object has
 */
export declare class InstanceVarParam extends Param {
    constructor(Options: IParamOptions);
}
/**
 * @description a dropdown list with the boolean instance variables the object has
 */
export declare class InstanceVarBoolParam extends Param {
    constructor(Options: IParamOptions);
}
/**
 * @description a dropdown list with non-boolean event variables in scope
 */
export declare class EventVarParam extends Param {
    constructor(Options: IParamOptions);
}
/**
 * @description a dropdown list with boolean event variables in scope
 */
export declare class EventVarBoolParam extends Param {
    constructor(Options: IParamOptions);
}
/**
 * @description a string parameter which is interpreted as an animation name in the object
 */
export declare class AnimationParam extends Param {
    static Type: string;
    constructor(Options: IParamOptions);
}
